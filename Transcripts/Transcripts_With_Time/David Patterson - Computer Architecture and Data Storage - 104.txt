0:00:00
Speaker 1 :the following is a conversation with
 David Patterson Turing Award winner and professor of computer science atBerkeley he's known for pioneering
 contributions to RISC processor architecture used by 99% of new chipstoday and for co-creating RAID storage
 the impact that these two lines of research and development have had in ourworld is immeasurable he's also one of
 the great educators of computer science in the world his book with John Hennessyis how I first learned about and was
 humbled by the inner workings of machines at the lowest level quicksummary of the ads to sponsors the
 Jordan Harbinger show and cash app please consider supporting the podcastby going to Jordan Harbinger complex and


0:00:45
Speaker 0 :

0:00:46
Speaker 1 :downloading cash app and using code
 Lexx podcast click on the links buy the stuff it's the best way to support thispodcast and in general the journey I'm
 on in my research and startup this is the artificial intelligence podcast ifyou enjoy it
 subscribe on YouTube review it five stars in hype a podcast supported onpatreon or connect with me on Twitter
 and Lex Friedman spelled without the e just Fri DM a.m. as usual I'll do a fewminutes of ads now and never any ads in
 the middle that can break the flow of the conversationthis episode is supported by the Jordan
 Harbinger show go to Jordan Harbinger calm / Lexit's how he knows I set you on that page
 there's links to subscribe to it an apple podcast Spotify and everywhereelse I've been binging on this podcast
 it's amazing Jordan is a great human being he gets the best out of his guests- deep calls him out when it's needed it
 makes the whole thing fun to listen to he's interviewed Kobe Bryant Mark Cubanand Neil deGrasse Tyson and Garry
 Kasparov and many more I recently listened to his conversation with FrankAbagnale author of catch me if you can
 one of the world's most famous Kahneman perfect podcast length and topic for arecent long distance run that I did
 go to Jordan Harbinger complex to give him my love and to support this podcastsubscribe also on Apple podcast Spotify
 and everywhere else this show is presented by cash app the greatestsponsor of this podcast ever and the
 number one finance app in the App Store when you get a used coat Lex podcastcash app lets you send money to friends
 buy bitcoin invest in the stock market with as little as one dollar since gasrep allows you to buy bitcoin let me
 mention that cryptocurrency in the context of the history of money isfascinating I recommend the scent of
 money as a great book on this history also the audio book is amazing debitsand credits on Ledger's started around
 30,000 years ago the US dollar created over two hundred years ago and the firstdecentralized cryptocurrency released
 just over ten years ago so given that history cryptocurrencies still very muchin its early days of development but
 it's still aiming to and just might redefine the nature of money so again ifyou get cash out from the App Store
 Google Play and use the code Lex podcast you get ten dollars and cash up willalso donate ten dollars to first an
 organization that is helping to advance robotics to stem education for youngpeople around the world and now here's
 my conversation with David Patterson let's start with the big historicalquestion how have computers changed in
 the past 50 years at both the fundamental architectural level and in

0:03:37
Speaker 0 :general in your eyes well the biggest
 thing that happened was the invention of the microprocessor so computers thatused to fill up several rooms could fit
 inside your cell phone and not only and how do they get smaller they got a lotfaster so they're million times faster
 than they were 50 years ago and they're much cheaper and they're RIBA covetousyou know there's seven point eight
 billion people on this planet probably half of them have cell phones but youknow just remarkable


0:04:11
Speaker 1 :it's probably more micro processors than


0:04:14
Speaker 0 :there are people sure I don't know what
 the ratio is but I'm sure it's above one maybe it's ten to one or some numberlike that what is a microprocessor so a
 way to say what a microprocessor is to tell you what's inside a computer so acomputer forever has classically had
 five pieces there's input and output which kind of naturally as you'd expectis input is like speech or typing and
 output is displays there's a memory and like the name sounds it it remembersthings so it's integrated circuits whose
 job is you put information in and when you ask for it it comes back out that'smemory and the third part is the
 processor where the team microprocessor comes from and that has two pieces aswell and that is the control which is
 kind of the brain of the processor and the what's called the arithmetic unitit's kind of the Brawn of the computer
 so if you think of the as a human body the arithmetic unit the thing that doesthe number crunching is the is the body
 and the control is the brain so those five pieces input/output memoryarithmetic unit and control are have
 been in computers since the very dawn in the last two are considered theprocessor so a microprocessor simply
 means a process of the fits on a microchip and that was invented at aboutyou know 40 years ago was the first
 microprocessor it's interesting that you

0:05:46
Speaker 1 :refer to the arithmetic unit as the like
 he connected to the body and the controller's of the brain so I guess Inever thought of it that was a nice way
 to think of it because most of the actions the microprocessor does in termsof literally sort of computation with
 the microprocessor does computation it processes information and most of thething it does is basically earth net
 arithmetic operations what what are the

0:06:15
Speaker 0 :operations by the way it's a lot like a
 calculator you know so there are add instructions a subtractive Stresslessmultiply and divide and
 kind of the brilliance of the invention of the my computer or the processor isthat it performs very trivial operations
 but it just performs billions of them per second and what we're capable ofdoing is writing software that can take
 these very trivial instructions and have them create tasks that can do thingsbetter than human beings can do today


0:06:50
Speaker 1 :just looking back through your career
 did you anticipate the kind of how good we would be able to get at doing thesesmall basic operations I think what how
 many surprises along the way we just kind of set back and said wow I didn'texpect it to go this fast this good well


0:07:09
Speaker 0 :the the fundamental driving force is
 what scored Moore's law which was named after Gordon Moore who's a Berkeleyalumnus and he made this observation
 very early in what are called semi conductors and semiconductors are theseideas you can build these very simple
 switches and you can put them on these microchips and he made his observationover 50 years ago he looked at a few
 years and said I think what's going to happen is the number of these littleswitches called transistors is going to
 double every year for the next decade and he said this in 1965 and in 1975 hesaid well maybe he's gonna double every
 two years and that I would other people since named that Moore's Law guided theindustry and when Gordon Moore makes
 that prediction he he wrote a paper back in I think in the in the 70s and saidnot only did this going to happen he
 wrote what would be the implications of that and in this article from 1965 he heshows ideas like computers being in cars
 and computers being in something that you would buy in the grocery store andstuff like that so he kind of not only
 called his shot he called the implications of it so if you were in inthe computing field and a few believed
 Moore's prediction he kind of said what the what would be happening in thefuture
 so so it's not kind of it's at one sense this is what waspredicted and you could imagine it was
 easily believed that Moore's law was going to continue and so this would bethe implications on the other side there
 are these shocking events in your life like I remember driving in meriem acrossthe bay in San Francisco and seeing a
 bulletin board at a local Civic Center and had a URL on it uh and it was likeif for all for all that's for the people
 at the time these first URLs and that's the you know ww select stuff with theHTTP people thought it was looks like
 alien alien writing right they'd see these advertisements and commercials orbulletin boards that had this alien
 writing on it so for the lay people is like what the hell is going on here andfor those people interesting it's oh my
 god this stuff is getting so popular it's actually leaking out of our nerdyworld and into the real world so that I
 mean there is events like that I think another one was I member with the in theearly days of the personal computer when
 we started seeing advertisements in magazines for personal computers likeit's so popular that it's it made the
 newspapers so at one hands you know Gordon Moore predicted it and you kindof expected it to happen but when it
 really hit and you saw it affecting society it was it was shocking so maybe

0:10:02
Speaker 1 :taking a step back and looking both the
 engineering and philosophical perspective what what do you see as thelayers of abstraction in the computer do
 you see a computer as a set of layers of

0:10:15
Speaker 0 :abstractions yeah and I think that's one
 of the things that computer science fundamentals is the these things arereally complicated in the way we cope
 with complicated software and complicated hardware is these layers ofabstraction and that simply means that
 we you know suspend disbelief and pretend that the only thing you know isthat layer and you don't know anything
 about the layer below it and that's the way we can make very complicated thingsand probably it started with hardware
 that's the way it was done but it's been proven extremely useful andyou know I would think in a modern
 computer today there might be 10 or 20 layers of abstraction and they're alltrying to kind of enforce this contract
 is all you know is this interface there's a set of commands that you canallow to use and you stick to those
 commands that we will faithfully execute that and it's like peeling the airlayers of a London onion you get down
 there's a new set of layers and so forth so for people who want to study computerscience the exciting part about it is
 you can keep peeling those layers you you take your first course and you mightlearn to program in Python and then you
 can take a follow-on course and you can get it down to a lower level languagelike C and you know you can go and you
 can if you want to you can start getting into the hardware layers and you keepgetting down all the way to that
 transistor that I talked about that Gordon Moore predicted and you canunderstand all those layers all the way
 up to the highest level application software so it's it's a very kind ofmagnetic field if you're interested you
 can go into any depth and keep going in particular what's happening right now orit's happened in software last twenty
 years and recently in hardware there's getting to be open sourced versions ofall of these things so what open source
 means is what the engineer the programmer designs it's not secret thebelonging to a company it's up there on
 the World Wide Web so you can see it so you can look at for lots of pieces ofsoftware that you use you can see
 exactly what the programmer does if you want to get involved that used to stopat the hardware recently there's been an
 efforts to make open-source hardware and those interfaces open so you can seethat so instead of before you had to
 stop at the hardware you can now start going layer by layer below that and seewhat's inside there so it's it's a
 remarkable time that for the interested individual can really see in great depthwhat's really going on and the computers
 that power everything that we see around

0:13:05
Speaker 1 :us are you thinking also
 when you say open source at the hardware level is this going to the designarchitecture instruction set level or is
 it going to literally the the you know the manufacturer of the of the actualhardware of the actual chips whether
 that's a six specialized a particular

0:13:27
Speaker 0 :domain or the general yeah so let's talk
 about that a little bit so when you get down to the bottom layer of software theway software talks to hardware is in a
 vocabulary and what we call that vocabulary we call that the words ofthat vocabulary called instructions in
 the technical term for the vocabulary is instruction setso those instructions are likely we
 talked about earlier that can be instructions like add subtract andmultiply divide there's instructions to
 put data into memory which is called a store instruction and to get data backwhich is called the load instructions
 and those simple instructions go back to the very dawn of computing in you knowin 1950 the commercial commercial
 computer had these instructions so that's the instruction set that we'retalking about so up until I'd say ten
 years ago these instruction sets are all proprietary so a very popular one isAlden by Intel the one that's in the
 cloud and then all the pcs in the world the Intel owns that instruction set it'sreferred to as the x86 there have been a
 sequence of ones that the first number was called 8086and since then there's been a lot of
 numbers but they all end in 86 so there's then that kind of family ofinstruction sets and that's proprietary
 and that's proprietary the other one that's very popular is from arm thatkind of powers all of all the cell
 phones in the world all the iPads in the world and a lot of things that areso-called Internet of Things devices arm
 and that one is also proprietary arm will license it to people for a fee butthey own that so the new idea that got
 started at Berkeley kind of unintentionally ten years ago isin early in my career we pioneered a way
 to do of these vocabularies instruction sets that was very controversial at thetime at the time in the 1980s
 conventional wisdom was these vocabularies instruction sets shouldhave you know powerful instructions so
 polysyllabic kind of words you can think of that and and so that instead of justadd subtract and multiply they would
 have polynomial vied or sort a list and the hope was of those powerfulvocabularies that make it easier for
 software so we thought that didn't make sense for microprocessors servers peopleat Berkeley and Stanford and IBM who
 argued the opposite and we what we called that was a reduced instructionset computer in the abbreviation was our
 ISC and typical for computer people we use the abbreviations start pronouncingit so risk was there so we said for
 microprocessors which with Gordon's Moore is changing really fast we thinkit's better to have a pretty simple set
 of instructions reduce set of instructions that that would be a betterway to build microprocessors since
 they're going to be changing so fast due to Moore's law and then we'll just usestandard software to cover the used
 generate more of those simple instructions and one of the pieces ofsoftware that it's in a software stack
 going between these layers of abstractions is called a compiler and itbasically translates it's a translator
 between levels we said the translator will handle it so the technical questionwas well since there are these reduced
 instructions you have to execute more of them yeah that's right but maybe theyexecute them faster yeah that's right
 there's simpler so they could go faster but you have to do more of them sowhat's what's that trade-off look like
 and it ended up that we ended up executing maybe 50 percent moreinstructions maybe 1/3 more instructions
 but they ran four times faster so so this risk controversial risk ideasproved to be maybe factors of three or
 four better I love that this idea was

0:17:28
Speaker 1 :controversial and
 most kind of like a rebellious so that's in the context of what was moreconventional is the complex instruction
 set competing so how'd you pronounce

0:17:41
Speaker 0 :that Sisk Sisk risk vs. Sisk and and
 believe it or not this sounds very very you know who cares about this right itwas it was violently debated at several
 conferences it's like what's the brightman ago is is and people thoughtrisk was you know was de-evolution we're
 gonna make software worse by making death instructions simpler and they'refierce debates at several conferences in
 the 1980s and then later in the eighties that kind of settled to these benefitsit's not completely intuitive to me why


0:18:15
Speaker 1 :

0:18:18
Speaker 0 :risk has for the most part one yes so
 why do that happen yeah yeah and maybe I

0:18:21
Speaker 1 :can sort of say a bunch of dumb things
 that could lay the land for further commentary so to me and this is a thisis kind of interesting thing if you look
 at C++ was just see with modern compilers you really could write fastercode with C++ so relying on the compiler
 to reduce your complicated code into something simple and fast so to mecomparing risk maybe this is a dumb
 question but why is it that focusing the definition the design of the instructionset on very few simple instructions in
 the long run provide faster execution versus coming up with like I said a tonof complicated instructions then over
 time you know years maybe decades you come up with compilers that can reducethose into simple instructions for you


0:19:18
Speaker 0 :yeah some let's try and split that into
 two pieces so if the compiler can do that for you if the pilot can take youknow a complicated program and produce
 simpler instructions then the programmer doesn't care right programmer yeah yeahI don't care just how how fast is the
 computer I'm using how much does it cost and so what we whatand kind of in the software industry is
 right around before the 1980s critical pieces of software we're still writtennot in languages like C or C++ they were
 written in what's called assembly language where there's this kind ofhumans writing exactly at the
 instructions at the level then that a computer can understand so they werewriting add subtract multiply you know
 instructions it's very tedious but the belief was to write this lowest level ofsoftware that the people use which are
 called operating systems they had to be written in assembly language becausethese high-level languages were just too
 inefficient they were too slow or the the programs would be too big so thatchanged with a famous operating system
 called UNIX which is kind of the grandfather of all the operating systemstoday so the UNIX demonstrated that you
 could write something as complicated as an operating system in a language like Cso once that was true then that meant we
 could hide the instruction set from the programmer and so that meant then itdidn't really matter the programmer
 didn't have to write lots of these simple instructions so that was up tothe compiler so that was part of our
 arguments for risk is if you were still writing assembly languages maybe abetter case for sis constructions but if
 the compiler can do that it's gonna be you know that's done once the computertranslates it once and then every time
 you run the program it runs that this this potentially simpler instructionsand so that that was the debate right is
 because and people would acknowledge that these simpler instructions couldlead to a faster computer you can think
 of mono syllabic constructions you could say them you know if you think ofreading you probably read them faster or
 say them faster than long instructions the same thing that analogy works prettywell for hardware and as long as you
 didn't have to read a lot more of those instructions you could win so that'sthat's kind of that's the basic idea for


0:21:49
Speaker 1 :risk but it's interesting that the in
 that discussion of UNIX to see that there's only one stepof levels of abstraction from the code
 that's really the closest to the machine to the code that's written by human it'suh at least to me again perhaps a dumb
 intuition but it feels like there might have been more layers sort of differentkinds of humans stacked as well of each


0:22:16
Speaker 0 :other so what's true and not true about
 what you said is several of the layers of software like so the if you hear twolayers would be suppose we just talked
 about two layers that would be the operating system like you get from fromMicrosoft or from Apple like iOS or the
 Windows operating system and let's say applications that run on top of it likeWord or Excel so both the operating
 system could be written in C and the application could be written in C so butyou could construct those two layers and
 the applications absolutely do call upon the operating system and the change wasthat both of them could be written in
 higher-level languages so it's one step of a translation but you can still buildmany layers of abstraction of software
 on top of that and that's how how things are done today so still today many ofthe layers that you'll you'll deep deal
 with you may deal with debuggers you may deal with linkers there's libraries manyof those today will be written in c++
 say even though that language is pretty ancient and even the Python interpreteris probably written in C or C++ so lots
 of layers there are probably written in these some old fashioned efficientlanguages that still take one step to
 produce these instructions produce RISC instructions but they're composed eachlayer of software invokes one another
 through these interfaces and you can get ten layers of software that way so in

0:24:03
Speaker 1 :general the risk was developed here


0:24:06
Speaker 0 :Berkeley it was kind of the three places
 that were these radicals that advocated for thisagainst the rest of community where IBM
 Berkeley and Stanford you're one of

0:24:17
Speaker 1 :

0:24:20
Speaker 0 :these radicals and how radical did you


0:24:22
Speaker 1 :feel how confident did you feel how
 doubtful were you that risk might be the right approach because it may you canalso Intuit that is kind of taking a
 step back into simplicity not forward

0:24:38
Speaker 0 :into simplicity yeah no it was easy to
 make yeah it was easy to make the argument against it well this was mycolleague John Hennessy at Stanford and
 I we were both assistant professors and for me I just believed in the power ofour ideas I thought what we were saying
 made sense Moore's Law is going to move fast the other thing that I didn'tmention is one of the surprises of these
 complex instruction sets you could certainly write these complexinstructions if the programmer is
 writing them in themselves it turned out to be kind of difficult for the compilerto generate those complex instructions
 kind of ironically you'd have to find the right circumstances that that justexactly fit this complex instruction it
 was actually easier for the compiler to generate these simple instructions sonot only did these complex instructions
 make the hard work more difficult to build often the compiler wouldn't evenuse them and so it's harder to build the
 compiler doesn't use them that much the simple instructions go better withMoore's Law that's you know the number
 of transistors is doubling every every two years so we're gonna have you knowthe you want to reduce the time to
 design the microprocessor that may be more important than these numberinstructions so I think we believed in
 the that we were right that this was the best idea then the question became inthese debates well yeah that's a good
 technical idea but in the business world this doesn't matter there's other thingsthat matter it's like arguing that if
 there's a standard with the railroad tracks and you've come up with a betterwith but the whole world has covered
 railroad tracks so you'll your ideas have no chance of successcommercial success it was technically
 right but commercially it'll be

0:26:25
Speaker 1 :insignificant yeah this it's kind of sad
 that this world the history of human civilization is full of good ideas thatlost because somebody else came along
 first with a worse idea and it's good that in the computing world at leastsome of these have well well you could
 are I mean it's probably still sisk

0:26:45
Speaker 0 :people that say yeah still are but and
 what happened was what was interesting Intel a bunch of the system companieswith Sisk instruction sets of vocabulary
 they gave up but not Intel what Intel did to its credit because Intel'svocabulary was in the in the personal
 computer and so that was a very valuable vocabulary because the way we distributesoftware is in those actual instructions
 it's in the instructions of that instruction set so they then you don'tget that source code what the
 programmers wrote you get after it's been translated into the last levelthat's if you were to get a floppy disk
 or download software it's in the instructions that instruction set so thex86 instruction set was very valuable so
 what Intel did cleverly and amazingly is they had their chips in hardware do atranslation step they would take these
 complex instructions and translate them into essentially in RISC instructions inHardware on the fly you know at at
 gigahertz clock speeds and then any good idea that risk people had they could useand they could still be compatible with
 us with this really valuable PC software software base and which also had veryhigh volumes you know a hundred million
 personal computers per year so the sisk architecture in the business world wasactually one in in this PC era so just


0:28:17
Speaker 1 :going back to the the time of designing
 risk when you design an instruction set architecture do you think like aprogrammer do you think like a
 microprocessor engineer do you think like a artist a philosopher do you thinkin software and hardware I mean is it


0:28:39
Speaker 0 :art I see science yeah I'd say I think
 designing a goods instruction set as an art and I think you're trying to balancethe the simplicity and speed of
 execution with how well easy it will be for compilers to use it alright you'retrying to create an instruction set that
 everything in there can be used by compilers there's not things that aremissing
 that'll make it difficult for the program to run they run efficiently butyou want it to be easy to build as well
 so it's that kind of so you're thinking I'd say you're thinking hard we'retrying to find a hardware software
 compromise that'll work well and and it's you know it's you know it's amatter of taste right it's it's kind of
 fun to build instruction sets it's not that hard to build an instruction setbut to build one that catches on and
 people use you know you have to be you know fortunate to be the right place atthe right time or have a design that
 people really like are using metrics

0:29:41
Speaker 1 :says is it quantifiable because you kind
 of have to anticipate the kind of programs that people will write yetahead of time so is that can you use
 numbers can use metrics can you quantify something ahead of time or is this againthat's the art part where you're kind of


0:29:59
Speaker 0 :knows it's a a big a big change kind of
 what happened I think from Hennessey's and my perspective in the 1980s whathappened was going from kind of really
 you know taste and hunches to quantifiable in in fact he and I wrote atextbook at the end of the 1980s called
 computer architecture a quantitative approach I heard of that and and it'sit's the thing it it had a pretty big
 big impact in the field because we went from textbooks that kind of listed sohere's what this computer does and
 here's the pros and cons and here's what this computer doesn't pros and cons tosomething where there were formulas
 in equations where you could measure things so specifically for instructionsets what we do in some other fields do
 is we agree upon a set of programs which we call benchmarks and a suite ofprograms and then you develop both the
 hardware and the compiler and you get numbers on how well your your computerdoes given its instruction set and how
 well you implemented it in your microprocessor and how good yourcompilers are and in computer
 architecture we you know using professors terms we grade on a curverather than greater than absolute scale
 so when you say you know this these programs run this fast well that's kindof interesting but how do you know it's
 better while you compare it to other computers at the same time so the bestway we know how to make turned it into a
 kind of more science and experimental and quantitative is to compare yourselfto other computers or the same era that
 have the same access the same kind of technology on commonly agreed benchmark

0:31:45
Speaker 1 :programs so maybe two toss-up two
 possible directions we can go one is what are the different trade-offs indesigning architectures Ubben are you
 talking about Siskin risk but maybe a little bit more detail in terms ofspecific features that you were thinking
 about and the other side is what are the metrics that you're thinking about when

0:32:06
Speaker 0 :looking at these trade-offs yeah well
 let's talk about the metrics so during these debates we actually had kind of ahard time explaining convincing people
 the ideas and partly we didn't have a formula to explain it and a few yearsinto it we hit upon the formula that
 helped explain what was going on and I think if we can do this see how it worksorally just is this so the yes if I can
 do a formula or Li L C so the so fundamentally the way you measureperformance is how long does it take a
 program to run a program if you have ten programs and typically these benchmarkswere sweet because you'd want to have
 ten programs so they could represents lots of different applications so forthese ten programs how long they take to
 run now when you're trying to explain why ittook so long you could factor how long
 it takes a program to run into three factors one of the first one is how manyinstructions did it take to execute so
 that's the that's the what we've been talking about you know the instructionsof Academy
 how many did it take all right the next question is how long did eachinstruction take to run on average so
 you multiply the number instructions times how long it took to run and thatgets you help okay so that's but now
 let's look at this metric of how long did it take the instruction to run wellit turns out the way we could build
 computers today is they all have a clock and you've seen this when you if you buya microprocessor it'll say 3.1 gigahertz
 or 2.5 gigahertz and more gigahertz is good well what that is is the speed ofthe clock so 2.5 gigahertz turns out to
 be 4 billions of instruction or 4 nanoseconds so that's the clock cycletime but there's another factor which is
 what's the average number of clock cycles that takes per instructions soit's number of instructions average
 number of clock cycles in the clock cycle timeso in these risks ist's debates we would
 we they would concentrate on but wrist makes needs to take more instructionsand we'd argue what maybe the clock
 cycle is faster but what the real big difference was was the number of clockcycles per instruction or instruction as


0:34:21
Speaker 1 :fascinating what about the mess up the
 beautiful mess of parallelism in the

0:34:26
Speaker 0 :whole picture parallelism which has to
 do was say how many instructions could execute in parallel and things like thatyou could think of that as affecting the
 clock cycles per instruction because it's the average clock cycles perinstruction so when you're running a
 program if it took a hundred billion instructions and on average it took twoclock cycles per instruction and they
 were four nanoseconds you could multiply that out and see how long it took to runand there's all kinds of tricks to try
 and reduce the number of clock cycles per instruction but it turned out thatthe way they would do these complex
 instructions is they would actually build what we would call an interpreterin a simpler a very simple hardware
 interpreter but it turned out that for sis constructions if you had to use oneof those interpreters it would be like
 10 clock cycles per instruction where the risk instructions could be too sothere'd be this factor of five advantage
 in clock cycles per instruction we have to execute say 25 or 50 percent moreinstructions so that's where the wind
 would come and then you could make an argument whether the clock cycle timesare the same or not but pointing out
 that we could divide the benchmark results time per program into threefactors and the biggest difference
 between risk consists was the clock cycles per you execute a few moreinstructions but the clock cycles per
 instruction is much less and that was what this debate once we made thatargument then people say okay I get it
 and so we went from it was outrageously controversial in you know 1982 thatmaybe probably by 1984 so people said oh
 yeah technically they've got a good argument

0:36:03
Speaker 1 :what are the instructions in the RISC
 instruction set just to get an intuition

0:36:06
Speaker 0 :okay
 1995 I was asked scientific the future of what microprocessor so I and thatwell as I'd seen these predictions and
 usually people predict something outrageous just to be entertaining rightand so my prediction for 2020 was you
 know things are gonna be pretty much they're gonna look very familiar to whatthey are and they are in if you were to
 read the article you know the things I said are pretty much true theinstructions that have been around
 forever are kind of the same and that's

0:36:39
Speaker 1 :the outrageous prediction actually yeah
 given how fast computers and well you

0:36:41
Speaker 0 :know Moore's law was gonna go on we
 thought for 25 more years you know who knows but kind of the surprising thingin fact you know Hennessy and I you know
 won the the ACM a.m. Turing award for both the RISC instruction setcontributions and for that textbook I
 mentioned but you know we are surprised that here we are 35 40 years later afterwe did our work and the the conventional
 wisdom of the best way to do instruction sets is still those RISC instructionsets that look very similar to what we
 look like you know we did in the 1980s so those surprisingly there hasn'tsome radical new idea even though we
 have you know a million times as many transistors as we had back then but what

0:37:30
Speaker 1 :are the basic constructions and how did
 they change over the years so we're talking about addition subtract these

0:37:36
Speaker 0 :are the specific so the the to get so
 the things that are in a calculator you are in a computer so any of the buttonsthat are in the calculator in the crater
 so the little button so if there's a memory function key and like I saidthose are turns into putting something
 in memories called a store bring something back Scott load just as a

0:37:53
Speaker 1 :quick tangent when you say memory what


0:37:57
Speaker 0 :does memory mean well I told you there
 were five pieces of a computer and if you remember in a calculator there's amemory key so you you want to have
 intermediate calculation and bring it back laterso you'd hit the memory plus key M plus
 maybe and it would put that into memory and then you'd hit an REM like returninstruction and it bring it back in the
 display so you don't have to type it you don't have to write it down bring itback again so that's exactly what memory
 is if you can put things into it as temporary storage and bring it back whenyou need it later
 so that's memory and loads and stores but the big thing the difference betweena computer and a calculator is that the
 computer can make decisions and in amazingly the decisions are as simple isis this value less than zero or is this
 value bigger than that value so there's and those instructions which are calledconditional branch instructions is what
 give computers all its power if you were in the early days of computing beforethe what's called the general-purpose
 microprocessor people would write these instructions kind of in hardware and butit couldn't make decisions it would just
 it would do the same thing over and over again with the power of having branchinstructions that can look at things and
 make decisions automatically and it can make these decisions you know billionsof times per second and amazingly enough
 we can get you know thanks to advances machine learning we can we can createprograms that can do something smarter
 than human beings can do but if you go down that very basic level it's theinstructions are the keys on the
 calculator plus the ability to make decisions of these conditional branchinstructions you know and all decisions


0:39:32
Speaker 1 :fundamental can be reduced down to these


0:39:36
Speaker 0 :- assumptions yeah so in in fact and so
 you know going way back in the sack back to you know we did for risk projects atBerkeley in the 1980s they did a couple
 at Stanford in the 1980s in 2010 we decided we wanted to do a newinstruction set learning from the
 mistakes of those RISC architectures of 1980s and that was done here at Berkeleyalmost exactly 10 years ago in the the
 people who did it I participated but other Christos Sanne [ __ ] and othersdrove it
 they called it risk 5 to honor those risk the four risk projects of 1980s so

0:40:14
Speaker 1 :what is risk 5 involved so leaders 5 is


0:40:15
Speaker 0 :another instruction set of vocabulary
 it's learned from the mistakes of the past but it still has if you look at thethere's a core set of instructions it's
 very similar to the simplest architectures from the 1980s and the bigdifference about risk 5 is it's open so
 I talked early about proprietary versus open and kind of sauce software so thisis an instruction set so it's a
 vocabulary it's not it's not hardware but by having an open instruction set wecan have open source implementations
 open source processors that people can

0:40:54
Speaker 1 :use where do you see that going says
 it's the really exciting possibilities but she's just like in the ScientificAmerican if you were to predict 10 20 30
 years from now that kind of ability to utilize open source instruction setarchitectures like risk 5 what kind of


0:41:12
Speaker 0 :possibilities might that unlock yeah and
 so just to make it clear because this is confusing the specification of risk 5 issomething that's like in a text book
 there's books about it so that's what that's kind of defining an interfacethere's also the way you build hardware
 is you write it in languages they're kind of like sea but they're specializedfor hardware that gets translated into
 hardware and so these implementations of this specification are what are the opensource so they're written in something
 that's called Verilog or VHDL but it's put up on the weblike that you can see the C++ code for
 Linux on the web so that's the open instruction set enables open sourceimplementations at risk five so you can


0:42:01
Speaker 1 :literally build a processor using this


0:42:03
Speaker 0 :instruction set people are and people
 are so what happened to us that the story was this was developed here forour use to do our research and we made
 it we licensed under the berkeley software distribution license like a lotof things get licensed here so other
 academics use it they wouldn't be afraid to use it and then about 2014 we startedgetting complaints that we were using it
 in our research in our courses and we got complaints from people in industrieswhy did you change your instruction set
 between the fall and the spring semester and well we get complaints of additionaltime why the hell do you care what we do
 with our instruction set and then when we talked to him we found out there wasthis thirst for this idea of an open
 instruction set architecture and they had been looking for one they stumbledupon ours at Berkeley thought it was boy
 this looks great we should use this one and so once we realize there is thisneed for an open instruction set
 architecture we thought that's a great idea and then we started supporting itand tried to make it happen so this was
 you know kind we accidentally stumbled into this and to this need in our timingwas good and so it's really taking off
 there's a you know universities are good at starting things but the not good it'ssustaining things so like Linux has the
 Linux Foundation there's a risk 5 foundation that we started there'sthere's an annual conferences and the
 first one was done I think January 2015 and the one that was just last Decemberin it you know it had 50 people at it
 and the last one last December had kind of 1,700 people were at it and thecompanies excited all over the world
 so if predicting into the future you know if we were doing 25 years I wouldpredict that risk 5 will be you know
 possibly the most popular instruction set architecture out there because it'sa pretty good instruction set
 architecture and it's open and free and there's no reasonlots of people shouldn't use it and
 there's benefits just like Linux is so popular today compared to 20 years ago Iand you know the fact that you can get
 access to it for free you can modify it you can improve it for all those samearguments and so people collaborate to
 make it a better system for all everybody to use and that works insoftware and I expect the same thing
 will happen in hardware so if you look

0:44:27
Speaker 1 :at arm Intel mips if you look at just
 the lay of the land and what do you think just for me because I'm notfamiliar how difficult this kind of
 transition would how much challenges this kind of transition would entail do

0:44:49
Speaker 0 :you see let me ask my dumb question


0:44:50
Speaker 1 :

0:44:52
Speaker 0 :another one no that's I know where
 you're headed well there's a budget I think the thing you point out there'sthere's these proprietary popular
 proprietary instruction sets the x86 and so how do we move to risk five

0:45:03
Speaker 1 :potentially in sort of in the span of
 five 10 20 years a kind of a unification in given that the device is the kind ofway we use devices IOT mobile devices
 and and the cloud keeps changing well

0:45:20
Speaker 0 :part of it a big piece of it is the
 software stack and what right now looking forward there seem to be threeimportant markets there's the cloud and
 then the cloud is simply companies like Alibaba and Amazon and Google Microsofthaving these giant data centers with
 tens of thousands of servers in maybe a hunt maybe a hundred of these datacenters all over the world and that's
 what the cloud is so the computer that dominates the cloud is the x86instruction set so the instructions are
 the vocal instructor sets using the cloud of the x86 almost almost 100% ofthat today is x86 the other big thing
 are cell phones and laptops those are the big things today I mean the PC isalso dominated by the x86 instruction
 set but those sales are dwindling you know there'smaybe 200 million pcs a year and there's
 I serve one and a half billion phones a year there's numbers like that so forthe phones that's dominated by arm and
 now and a reason that I talked about the software stacks and then the thirdcategory is Internet of Things which is
 basically embedded devices things in your cars and your microwaves everywhereso what's different about those three
 categories is for the cloud the software that runs in the cloud is determined bythese companies Alibaba Amazon Google
 Microsoft so that they control that software stack for the cell phonesthere's both for Android and Apple the
 software they supply but both of them have marketplaces where anybody in theworld can build software and that
 software is translated or you know compiled down and shipped in thevocabulary of arm so that's the the
 what's referred to as binary compatible because the actual it's the instructionsare turned into numbers binary numbers
 and shipped around the world so and the

0:47:25
Speaker 1 :size just a quick interruption so arm
 what is arm as arm is an instructions

0:47:32
Speaker 0 :like a risk-based yeah it's a risk-based
 instruction as a proprietary one arm stands for advanced RISC machine erm isthe name where the company is so it's a
 proprietary RISC architecture so and it's been around for a while and youknow the surely the most popular
 instruction set in the world right now they every year billions of chips areusing the arm design in this post PC era


0:47:57
Speaker 1 :is what it was the one of the early risk
 adopters of the risk yeah yeah the first

0:48:02
Speaker 0 :arm goes back I don't know 86 or so so
 Berkeley instead did their work in the early 80s their arm guys needed aninstruction set and they read our papers
 and it heavily influenced them so getting back my story what aboutInternet of Things well software's not
 shipped in Internet of Things it's the the embedded device people control thatsoftware stack so you would the
 opportune these four risk five everybody thinks isin the internet of things embedded
 things because there's no dominant player like there is in the cloud or thesmartphones and you know it's it's
 doesn't have a lot of licenses associated with and you can enhance theinstruction set if you want and it's a
 in and people have looked at instruction sets and think it's a very goodinstruction set so it appears to be very
 popular there it's possible that in the cloud people those companies controltheir software stacks so that it's
 possible that they would decide to use verse five if we're talking about tenand twenty years in the future the one
 of the be harder it would be the cell phones since people ship software in thearm instruction set that you'd think be
 the more difficult one but if if risk five really catches on and you know youcould in a period of a decade you can
 imagine that's changing over to give a

0:49:24
Speaker 1 :sense why risk five our arm is dominated
 you mentioned these three categories why has why did arm dominate why does itdominate the mobile device base and
 maybe the my naive intuition is that there are some aspects of powerefficiency that are important yeah that


0:49:42
Speaker 0 :somehow come along with risk well part
 of it is for these old Siskin structions that's like in the x86 it it was moreexpensive to these for the you know
 they're older so they have disadvantages in them because they were designed fortyyears ago but also they have to
 translate in hardware from sis constructions to risks instructions onthe fly and that costs both silicon area
 that the chips are bigger to be able to do that and it uses more power so armhis which has you know followed this
 risk philosophy is seen to be much more energy-efficient and in today's computerworld both in the cloud in cell phone
 and you know things it isn't the limiting resource isn't the number oftransistors you can fit in the chip it's
 what how much power can you dissipate for your application so by having areduced instruction set you that's
 possible to have a simpler hardware which is more energyefficient in energy efficiency is
 incredibly important in the cloud when you have tens of thousands of computersin a datacenter you want to have the
 most energy-efficient ones there as well and of course for embedded thingsrunning off of batteries you want those
 to be energy efficient in the cell phones too so it I think it's believedthat there's a energy disadvantage of
 using these more complex instruction set architectures so the other aspect of

0:51:11
Speaker 1 :this is if we look at Apple Qualcomm
 Samsung Huawei all use the ARM architecture and yet the performance ofthe systems varies I mean I don't know
 whose opinion you take on but you know Apple for some reason seems to performbetter and try these implementations
 architecture so where's the magic and

0:51:32
Speaker 0 :sure that happened yeah so what arm
 pioneered was a new business model as they said well here's our proprietaryinstruction set and we'll give you two
 ways to do it eat there we'll give you one of these implementations written inthings like C called Verilog and you can
 just use ours well you have to pay money for that not only pay will give you theyou know will license use to do that or
 you could design your own and so we're talking about numbers like tens ofmillions of dollars to have the right to
 design your own since they it's the instruction set belongs to them so Applegot one of those the right to build
 their own most of the other people who build like Android phones just get oneof the designs from arm and to do it
 themselves so Apple developed a really goodmicroprocessor design team they you know
 acquired a very good team that had was a building other microprocessors andbrought them into the company to build
 their designs so the instruction sets are the same the specifications are thesame but their hardware design is much
 more efficient than I think everybody else's and that's given Apple anadvantage in the marketplace and that
 the iPhones tend to be the faster than most everybody else's phones that arethey


0:52:58
Speaker 1 :it'd be nice to be able to jump around
 and kind of explore different little sides of this but let me ask one sort ofromanticized question what to you is the
 most beautiful aspect or idea of risk instruction set or instruction sets for

0:53:12
Speaker 0 :this you know what I think that you know
 I I'm you know I I was always attracted to the idea of you know smallestbeautiful why is that the temptation in
 engineering it's kind of easy to make things more complicated it's harder tocome up with a it's more difficult
 surprising they come up with a simple elegant solution and I think thatthere's a bunch of small features of of
 risk in general that you know where you can see this examples of keeping itsimpler makes it more elegant
 specifically in risk five which you know I'm I was kind of the mentor in theprogram but it was really driven by
 christos sama [ __ ] and two grad students Andrew Waterman Yin Sibley isthey hit upon this idea of having a
 subset of instructions a nice simple instruction subset instructions like40-ish instructions that all software
 the software status v can run just on those forty instructions and then theyprovide optional features that could
 accelerate the performance instructions that if you needed them could be veryhelpful but you don't need to have them
 and that that's a new really a new idea so risk five has right now maybe fiveoptional subsets that you can pull in
 but the software runs without them if you just want to build the just the coreforty instructions that's fine you can
 do that so this is fantastic educationally is so you can explaincomputers you only have to explain forty
 instructions and not thousands of them also if you invent some wild and crazynew technology like you know biological
 computing you'd like a nice simple instruction set and you can risk 5e ifyou implement those core instructions
 you can run you know really interesting programs on top of that so this idea ofa core set of instructions that the
 software stack runs on and then optional features that if youturn them on the compilers where used
 but you don't have to I think is a powerful idea what's happened in thepast if for the proprietary instruction
 sets is when they add new instructions it becomes required piece and so thatall all microprocessors in the future
 have to use those instructions so it's kind of like is for a lot of people asthey get older they gain weight
 all right is it that weight and age are correlated and so you can see theseinstruction sets get getting bigger and
 bigger as they get older so risk five you know let's you be as slim as your asa teenager and you only have to add
 these extra features if you're really gonna use them rather than every youhave no choice you have to keep growing
 with the instruction set I don't know if

0:55:59
Speaker 1 :the analogy holds out but that's a
 beautiful notion that there's it's almost like a nudge towards here's thesimple core that's the essential yeah I


0:56:07
Speaker 0 :think the surprising thing is still if
 we if we brought back you know the pioneers from the 1950s and showed themthe instruction set architectures they'd
 understand it they that doesn't look that different well you know I'msurprised and it's if there's it may be
 something you know to talk about philosophical things I mean there may besomething powerful about those you know
 forty or fifty instructions that all you need is these commands like theseinstructions that we talked about and
 that is sufficient to build to bring upon you know artificial intelligenceand so it's a remarkable surprising to
 me that is complicated Minoo microprocessors where the linewidths are narrower than the wavelength
 of light you know is this amazing technologies at some fundamental levelthe commands that software execute are
 really pretty straightforward and haven't changed that much in in decadesit's what a surprising outcome so


0:57:16
Speaker 1 :underlying all computation all Turing
 machines all artificial intelligent systems perhaps might be a very simpleinstruction
 set like like a risk 5 or it's yeah I

0:57:26
Speaker 0 :mean I that's kind of what I said I was
 interested to see I had another more senior faculty colleague and he he hadwritten something in Scientific American
 in you know his 25 years in the future and his turned out about when I was ayoung professor and he said yep
 I checked it I was interest to see how that was going to turn out for me andit's pretty held up pretty well but yeah
 so there's there's probably there's something I you know there's there mustbe something fundamental about those
 instructions that were capable of creating you know intelligence and frompretty primitive operations and just
 doing them really fast you kind of

0:58:09
Speaker 1 :mentioned the different maybe radical
 computational medium like biological and there's other ideas so there's a lot ofspaces in a6 or domain-specific and then
 there could be quantum computers and wood so we couldn't think of all thosedifferent mediums and types of
 computation what's the connection between swapping out different Hardwaresystems and the instruction set do you
 see those as disjoint or they

0:58:36
Speaker 0 :fundamentally coupled yeah so what's so
 kind of if we go back to the history you know when Moore's Law is in full effectand you're getting twice as many
 transistors every couple of years you know kind of the challenge for computerdesigners is how can we take advantage
 of that how can we turn those transistors into better computers fastertypically and so there was an era I
 guess in the 80s and 90s where computers were doubling performance every 18months and if you weren't around then
 what would happen is you had your computer and your friend's computerwhich was like a year year and a half
 newer and it was much faster than your computer and you he he or she could gettheir work done much faster than your
 typical user so people took their computers perfectly good computers andthrew them away to buy a newer computer
 because the computer one or two years later was so much faster so that's whatthe
 world was like in 80s and 90s well with the slowing down of Moore's law that'sno longer true right he not now with you
 know not decide computers with the laptops I only get a new laptop when itbreaks right well damn the disk broke or
 this display broke I got to buy a new computer but before you would throw themaway because it just they were just so
 sluggish compared to the latest computers so that's you know that's ahuge change of what's gone on so but yes
 since this lasted for decades kind of programmers and maybe all society isused to computers getting faster
 regularly it we now now believe those of us who are in computer design it'scalled computer architecture that the
 path forward is instead is to add accelerators that only work well forcertain applications
 so since Moore's law is slowing down we don't think general-purpose computersare gonna get a lot faster so the Intel
 processors of the world are not going to haven't been getting a lot fasterthey've been barely improving like a few
 percent a year it used to be doubling your 18 monthsand now it's doubling every 20 years so
 it was just shocking so to be able to deliver on what Moore's law used to dowe think what's going to happen what is
 happening right now is people adding accelerators to their microprocessorsthat only work well for some domains and
 by sheer coincidence at the same time that this is happening has been thisrevolution in artificial intelligence
 called machine learning so with as I'm sure your other guess I've said you knowa I had these two competing schools of
 thought is that we could figure out artificial intelligence by just writingthe rules top-down or that was wrong you
 had to look at data and infer what the rules are the machine learning andwhat's happened in the last decade or
 eight years this machine learning has won and it turns out that machinelearning the hardware you built from
 learning is pretty much multiply the matrix multiply is a key feature for theway people machine learning is done so
 that's a godsend for computer designers we know how to make metrics multiply runreally fast so general-purpose
 microprocessors are slowing down we're adding accelerators from machinelearning that fundamentally are doing
 matrix multiplies much more efficiently than general-purpose computers have doneso we have to come up with a new way to
 accelerate things the danger of only accelerating one application is howimportant is that application turns it
 turns out machine learning gets used for all kinds of things so serendipitouslywe found something to accelerate that's
 widely applicable and we don't even we're in the middle of this revolutionof machine learning we're not sure what
 the limits of machine learning are so this has been kind of a godsend ifyou're going to be able to Excel deliver
 on improved performance as long as people are moving their programs to beembracing more machine learning we know
 how to give them more performance even as Moore's Law is slowing down and

1:03:01
Speaker 1 :counter-intuitively
 the machine learning mechanism you can say is domain-specific but because it'sleveraging data it's actually could be
 very broad in terms of in terms of the domains it could be applied in yeahthat's exactly right sort of it's almost
 sort of people sometimes talk about the idea of software 2.0 we're almost takinganother step up in the abstraction layer
 in designing machine learning systems because now you're programming in thespace of data in the space of hyper
 parameters it's changing fundamentally the nature of programming and so thespecialized devices that that accelerate
 the performance especially neural network based machine learning systemsmight become the new general yes so the


1:03:51
Speaker 0 :this thing that's interesting point out
 these are not coral these are not tied together the it's enthusiasm aboutmachine learning about creating programs
 driven from data that we should figure out the answers fromrather than kind of top down which
 classically the way most programming is done in the way artificial intelligentused to be done
 that's a movement that's going on at the same time coincidentally and the thefirst word machine learnings machines
 right so that's going to increase the demand for computing because instead ofprogrammers being smart writing those
 those things down we're going to instead use computers to exam a lot of data tokind of create the programs that's the
 idea and remarkably this gets used for all kinds of things very successfullythe image recognition the language
 translation the game playing and you know it gets into pieces of the softwarestack like databases and stuff like that
 we're not quite sure how journal purposes but that's going on independentas Hardware stuff what's happening on
 the hardware side is Moore's Law is slowing down right when we need a lotmore cycles it's failing us it's failing
 us right when we need it because there's going to be a greater in peace a greaterincrease in computing and then this idea
 that we're going to do so-called domain-specific here's a domain thatyour greatest fear is you'll make this
 one thing work and that'll help you know 5% of the people in the world well thisthis looks like it's a very
 general-purpose thing so the timing is fortuitous that if we can perhaps if wecan keep building hardware that will
 accelerate machine learning the neural networks that'll beat the timing D rightthat that neural network revolution will
 transform your software the so called software 2.0 and the software the futurewill be very different from the software
 the past and just as our microprocessors even though we're still going to havethat same basic risk instructions to run
 a big pieces of the software stack like user interfaces and stuff like that wecan accelerate the the kind of the small
 piece that's computationally intensive it's not lots of lines of code but thereit takes a lot of cycles to run that
 code that that's going to be the accelerator piece and so this that'swhat makes this from a computer
 designer's perspective a really interesting decade but Hennessy and Italked about
 that the title of our Turing warrant speech is a new golden age we we seethis as a very exciting decade much like
 when we were assistant professors and the wrists stuff was going on that was avery exciting time was where we were
 changing what was going on we see this happening again tremendous opportunitiesof people because we're fundamentally
 changing how software is built and how we're running it so which layer of the

1:06:42
Speaker 1 :abstraction do you think most of the
 acceleration might be happening the if you look in the next ten years thatGoogle is working on a lot of exciting
 stuff with the TPU sort of there's a closer to the hardware that could beoptimizations around the IROC closer to
 the instruction set that could be optimization at the compiler level itcould be even at the higher level
 software stack yeah it's going to be I

1:07:05
Speaker 0 :mean if you think about the old risks
 this debate it was both it was software hardware it was thecompilers improving as well as the
 architecture improving and that that's likely to be the way things are nowwith machine learning they they're using
 domain-specific languages the languages like tensorflow and pi torch are verypopular with the machine learning people
 that those are the raising the level of abstraction it's easier for people towrite machine learning in these
 domain-specific languages like like a PI torch in tensorflowso where the most of the optimization
 but yeah and so that and so there'll be both the compiler piece and the hardwarepiece underneath it so as you kind of
 the fatal flaw for hardware people is to create really great hardware but nothave brought along the compilers and
 what we're seeing right now in the marketplace because of this enthusiasmaround hardware for machine learning is
 getting you know probably a billions of dollars invested in start-up companieswe're seeing startup companies go
 belly-up because they focus on the hardware but didn't bring the softwarestack along we talked about benchmarks
 earlier so I participated in machine learning didn't really have a set ofbenchmarks I think just two years ago
 they didn't have a set of benchmarks and we've created something called ml perfwhich
 machine learning benchmark suite and pretty much the companies who didn'tinvest in the software stack couldn't
 run a ml per fairy wall and the ones who did invest in software stack did andwe're seeing you know like kind of in
 computer architecture this is what happens you have these arguments aboutrisk versus ist's people spend billions
 of dollars in the marketplace to see who wins and it's not it's not a perfectcomparison but it kind of sorts things
 out and we're seeing companies go out of business and then companies like likethere's a company in Israel called
 Habana they came up with machine learning accelerators that they had goodml perf scores Intel had acquired a
 company earlier called nirvana a couple years ago they didn't revealthe amount of Perth's cores which was
 suspicious but month ago Intel announced that they're cancellingthe Nirvana product line and they've
 bought Habana for two billion dollars and Intel's going to be shipping Habanochips which have hardware and software
 and run the ml perf programs pretty well and that's going to be their productline in the future brilliant so maybe


1:09:36
Speaker 1 :just a linker briefly I'm a love metrics
 I love standards that everyone can gather around what are some interestingaspects of that portfolio of metrics


1:09:48
Speaker 0 :well one of the interesting metrics is
 you know what we thought it was you know we I was involved in the start you knowwe that Peter Matson is leading the
 effort from Google Google got it off the ground but we had to reach out tocompetitors and say there's no
 benchmarks here this we didn't we think this is bad for the field it'll be muchbetter if we look at examples like in
 the wrist days there was an effort to create a for the the people in the riskcommunity got together competitors got
 together a building risk microprocessors to agree on a set of benchmarks that wecalled spec and that was good for the
 industry is rather before the different risk architectures were arguing well youcan believe my performance others but
 those other guys are liars and that didn't do any good so we agreed on a setof benchmarks and then we could figure
 out who is faster between the various risk architectures but it was a littlebit faster but that drew the market
 rather than you know people were afraid to buy anything so we argued the samething would happen
 with him helper you know companies like Nvidia were you know maybe worried thatit was some kind of trap but eventually
 we all got together to create a set of benchmarks and do the right thing rightand we agree on the results and so we
 can see whether TP use or GPUs or CPUs are really faster than how much thefaster and I think from an engineer's
 perspective as long as the results are fair Europe you can live with it okayyou know you have a tip your hat to to
 your colleagues at another institution boy they did a better job than this whatyou what you hate is if it's it's false
 right they're making claims and it's just marketing [ __ ] and you know inthat's affecting sales so you from an
 engineer's perspective as long as it's a fair comparison and we don't come infirst place that's too bad but it's fair
 so we wanted to create that environment frame all perf and so now there's tencompanies I mean ten universities and
 fifty companies involved so pretty much AML perf has is the is the way youmeasure machine learning performance and
 and it didn't exist even two years ago

1:11:52
Speaker 1 :one of the cool things that I enjoy
 about the Internet has a few downsides but one of the nice things is people cansee through BS a little better with the
 presence yes has a metrics it's so it's really nice a companies like Google andFacebook and Twitter now it's the cool
 thing to do is to put your engineers forward and to actually show off howwell you do on these metrics there's not
 sort of it well there's a less of a desire to do marketing a less so in myin my sort of naive no I don't think


1:12:22
Speaker 0 :well I was trying to understand that you
 know what's changed from the 80s in this era I think because of things likesocial networking Twitter and stuff like
 that if you if you put up you know [ __ ] stuff right that's just youknow miss purposely misleading you know
 that you you can get a violent reaction in social media pointing out the flawsin your arguments right and so from a
 marketing perspective you have to be careful today that you didn't have to becareful that there'll be people who put
 off the flaw you can get the word out the flaws and what you're saying muchmore easily today than in the past you
 used to be it was used to be easier to get away with it and the other thingthat's been happening in terms of
 starting off engineers it's just in the software side people have largelyembraced open-source software it it was
 20 years ago it was a dirty word at Microsoft and today Microsoft is one ofthe big proponents of open source
 software the kind of that's the standard way most software gets built whichreally shows off your engineers because
 you can see if you look at the source code you can see who are making thecommits who's making the improvements
 who are the engineers at all these companies who are are you know reallygreat programmers and engineers and
 making really solid contributions which enhances their reputations and thereputation of the companies so but


1:13:50
Speaker 1 :that's of course not everywhere like in
 this space that I work more in is autonomous vehicles and they're stillthe machinery of hype and marketing is
 still very strong there and there's less willingness to be open in this kind ofopen source way and sort of benchmark so
 ml Perez represents the machine learning world is much better being open-sourceabout holding itself to standards of
 different the amount of incredible benchmarks in terms of the differentcomputer vision naturally new processing
 - inaudible

1:14:22
Speaker 0 :it you know historically it wasn't
 always that way I had a graduate student working with me David Martin so for incomputer in some fields benchmarking is
 been around forever so computer architecture databases maybe operatingsystems benchmarks are the way you
 measure progress but he was working with me and then started working with genderMalik and he's a gender Malik in
 computer vision space who I guess you've you interviewed yes and David Martintold me they don't have benchmarks
 everybody has their own vision algorithm in the way that my here's my image lookat how well I do and everybody had their
 own image so David Martin back when he did his dissertationfigured out a way to do benchmarks he
 had a bunch of graduate students identify images and then ran benchmarksto see which algorithms run well and
 that was as far as I know kind of the first time people did benchmarks incomputer vision in which was predated
 all you know the things that eventually led to imagenet himself like that butthen you know the vision community got
 religion and then once we got as far as image net then that let the guys inToronto be able to win the image net
 competition and then you know that changed the whole world it's a scary

1:15:44
Speaker 1 :step actually because when you enter the
 world of benchmarks you actually have to be good to participate as opposed to

1:15:52
Speaker 0 :yeah you can just you just believe
 you're the best in the world and I think the people I think they weren'tpurposely misleading I think if you
 don't have benchmarks I mean how do you know you know you could have yourintuition it's kind of like the way we
 did used to do computer architecture your intuition is that this is the rightinstruction set to do this job I believe
 in my experience my hunch is that's true we had to get to make things morequantitative to make progress and so I
 just don't know how you know in fields that don't have benchmarks I don'tunderstand how they figure out how
 they're making progress we're kind of in

1:16:30
Speaker 1 :the vacuum tube days of quantum
 computing what are your thoughts in this wholly different kind of space of

1:16:38
Speaker 0 :architectures uh you know I actually you
 know quantum computing his ideas been around for a while and I actuallythought well sure hope I retire before I
 have to start teaching this I'd say because I talked about give these talksabout the slowing of Moore's law and you
 know when we need to change by doing domain-specific accelerators commonquestions say what about quantum
 computing the reason that comes up it's in the news all the time so I think thekeep and the third thing to keep in mind
 is quantum computing is not right around the corner there have been two nationalreports one by the national campus of
 engineering another by the computing consortium where they did a frankassessment of quantum computing
 in both of those reports said you know as far as we can tell before you geterror corrected quantum computing it's a
 decade away so I think of it like nuclear fusion right there been peoplewho've been excited about nuclear fusion
 a long time if we ever get nuclear fusion it's going to be fantastic forthe world I'm glad people are working on
 it but you know it's not right around the corner that those two reports to mesay probably it'll be 2030 before
 quantum computing is a something that could happen and when it does happen youknow this is going to be big science
 stuff this is you know microkelvin almost absolute zero things that if theyvibrate if truck goes by it won't work
 right so this will be in data center stuff we're not gonna have a quantumcell phone and and it's probably a 2030
 kind of thing so I'm happy that other people are working on it but just youknow it's hard with all the news about
 it not to think that it's right around the corner and that's why we need to dosomething as Moore's Law is slowing down
 to provide the computing keep improving getting better for this next decade andand you know we shouldn't be betting on
 quantum computing are expecting quantum computing to deliver in the next fewyears it's it's probably further off you
 know I I'd be happy to be wrong it be great if quantum computing is gonnacommercially viable but it will be a set
 of applications it's not a general-purpose computation so it'sgonna do some amazing things but
 there'll be a lot of things that probably you know the the old-fashionedcomputers are gonna keep doing better
 for quite a while and there'll be a

1:19:01
Speaker 1 :teenager 50 years from now watching this
 video saying look how silly David Patterson was saying I said what did

1:19:08
Speaker 0 :2030
 I didn't say sorry I never we're not

1:19:12
Speaker 1 :gonna have quantum cellphones so he's


1:19:15
Speaker 0 :gonna be watching and well I mean III
 think this is such a you know given we've had Moore's law I just I feelcomfortable trying to do projects that
 are thinking about the next decade I I admire people who are trying to dothings that are 30 years out but it's
 such a fast-moving field I just don't know how to I'mnot good enough to figure out what
 what's the problems gonna be in 30 years you know 10 years is hard enough for me

1:19:42
Speaker 1 :so maybe if it's possible to untangle
 your intuition a little bit I spoke with Jim Keller I don't know ifyou're familiar with Jim and he he is
 trying to sort of be a little bit rebellious and to try to think that he

1:19:54
Speaker 0 :quotes me as being wrong yeah so what
 are your the relationship for the record

1:20:02
Speaker 1 :Jim talks about that he has an intuition
 that Moore's law is not in fact in fact dead yet and then it may continue forsome time to come
 what are your thoughts about Jim's ideas

1:20:14
Speaker 0 :in this space yeah this is just this is
 just marketing so but Gordon Moore said is a quantitative prediction if we cancheck the facts right which is doubling
 the number of transistors every two years so we can look back at Intel forthe last five years and ask him let's
 look at DRAM chips six years ago so that would be three two-year periods so thenour DRAM chips have eight times as many
 transistors as they did six years ago we can look up Intel microprocessors sixyears ago
 if Moore's law is continuing it should have eight times as many transistors assix years ago the answers in both those
 cases is no the problem has been because Moore's law was kind of genuinelyembraced by the semiconductor industries
 they would make investments in severe equipment to make Moore's Law come truesemiconductor improving in Moore's law
 in many people's mind are the same thing so when I say and I'm factually correctthat Moore's law is no longer holds we
 are not doubling transistors every years years the downside for a company likeIntel is people think that means it
 stopped that technology has no longer improved and so Jim is trying to reactat AraC the impression that
 semiconductors are frozen in 2000 nineteen are never gonna get better so Inever said that I said was Moore's law
 is no more and I'm strictly looking at a

1:21:57
Speaker 1 :number of transistors because that's


1:21:59
Speaker 0 :what more that's what Moore's law is
 there's the I don't know there's been this aura associated with Moore's lawthat they've enjoyed for fifty years
 about look at the field we're in we're doubling transistors every two yearswhat an amazing field which is an
 amazing thing that they were able to pull off but even as Gordon Moore saidyou know no exponential can last forever
 it's lasted for 50 years which is amazing and this is a huge impact on theindustry because of these changes that
 we've been talking about so he claims because he's trying to act and he claimsyou know Patterson says Moore's laws
 know more and look at all look at it it's still controlling and tsmc to sayit's as no longer but there but there's
 quantitative evidence that Moore's law is not continuing so what I say now totry and okay I understand the perception
 problem when I say Moore's law is stopped okay so now I say Moore's lawslowing down and I think Jim which is
 another way if he's if it's predicting every two years and I say it's slowingdown then that's another way of saying
 it doesn't hold anymore and and I think Jim wouldn't disagree that it's slowingdown because that sounds like it's
 things are still getting better just not as fast which is another way of sayingMoore's law isn't working anymore


1:23:18
Speaker 1 :it's still good for marketing but uh but
 what's your you're not you don't like expanding the definition of Moore's lawsort of uh well yeah that's really yeah


1:23:27
Speaker 0 :it's an educator you know are you know
 is this like bonding politics is everybody get their own factsor do we have Moore's law was a crisp
 you know amorous Carver Mead looked at his observations drawing on a log-logscale a straight line and that's what
 the definition of Moore's law is there's this other what Intel did for a whileinterestingly before Jim joined them
 they said oh no Morris lies in the number of doubling isn't really doublingtransistors every two years
 Moore's law is the cost of the individual dressedsister going down cutting in half every
 two years now that's not what he said but they reinterpreted it because theybelieved that the that the cost of
 transistors was continuing to drop even if they couldn't get twice as manypeople industry have told me that's not
 true anymore that basically then the in more recent technologies that got morecomplicated the actual cost of
 transistor went up so even even the a corollary might not be true butcertainly you know Moore's law that was
 the beauty of Moore's law it was a very simple it's like equals mc-squared rightit was like wow what an amazing
 prediction it's so easy to understand the implications are amazing and that'swhy it was so famous as a as a
 prediction and this this reinterpretation of what it meant andchanging is you know his revisionist
 history and I I'd be happy and and they're not claiming there's a newMoore's law they're not saying by the
 way it's instead of every two years it's every three years I don't think the Idon't think they want to say that I
 think what's going to happen is the new technology Commission's H ones get alittle bit slower so it it is slowing
 down the improvements will won't be as great and that's why we need to do newthings yeah I don't like that the the


1:25:24
Speaker 1 :idea of Moore's law is tied up with
 marketing I it would be nice if it's

1:25:29
Speaker 0 :whether it's marketing or it's it's well
 it could be affecting business but they could also be infecting the imaginationof engineers is if if Intel employees
 actually believe that we're frozen in 2019 well that's that would be bad for

1:25:46
Speaker 1 :Intel they not just Intel but everybody
 it's inspired Moore's law is inspiring

1:25:49
Speaker 0 :

1:25:50
Speaker 1 :yeah everybody but what's happening


1:25:52
Speaker 0 :right now talking to people in who have
 working in national offices and stuff like that a lot of the computer sciencecommunity is unaware that this is going
 on right that we are in an era that's going to need radical change at lowerlevels that could affect the whole
 software stack this you know if if the Intel if you're using cloud stuffand servers that you get next year are
 basically only a little bit faster than the servers you got this year you needto know that and we need to start
 innovating to start delivery blow on it if you're counting on your software yoursoftware going to add a lot more
 features assuming the computers can get faster that's not true so are you gonnahave to start making your software stack
 more efficient or are you gonna have to start learning about machine learning soit's you know it's kind of a it's a
 morning or call for arms that the world is changing right now and a lot ofpeople a lot of computer science PhDs
 are unaware of that so a way to try and get their attention is to say thatMoore's law is slowing down and that's
 gonna affect your assumptions and you know we're trying to get the word outand when companies like TSMC and Intel
 say oh no no no Moore's law is fine then people think okay that I don't have tochange my behavior I'll just get the
 next servers and you know if they start doing measurements though realize what'sgoing on it'd be nice to have some


1:27:15
Speaker 1 :transparency and metrics for for the
 layperson to be able to know if computers aregetting faster and there are yeah there


1:27:24
Speaker 0 :are there are a bunch of most people
 kind of use clock rate as a measure performance you know it's not a perfectone but if you've noticed clock rates
 are more or less the same as they were five years ago computers are a littlebetter than they aren't they haven't
 made zero progress but they've made small progress so you there's someindications out there and in our
 behavior right nobody buys the next laptop because it's so much faster thanthe laptop from the past four cell
 phones I think I don't know why people buy new cell phones you know because ofthe new ones announced the cameras are
 better but that's kind of domain-specific right they're puttingspecial purpose hardware to make the
 processing of images go much better so that's that that's the way they're doingit they're not particularly it's not
 that the ARM processor there's twice as fast as much as they'd addedaccelerators to help eat the experience
 of the phone

1:28:23
Speaker 1 :can we talk a little bit about one other
 exciting space arguably the same level of impact as your work with risk is raid

1:28:32
Speaker 0 :

1:28:33
Speaker 1 :and in your in 1988 you co-authored a
 paper a case for redundant array of inexpensive disks hence our AI D rate soyou that's where you introduce the idea
 rate incredible that that little I mean little that paper kind of had thisripple effect and had a really
 revolutionary effect so first what is

1:28:58
Speaker 0 :rate what is rate so this is work I did
 with my colleague Randy Katz and a star graduate student Garth Gibson so we hadjust done the fourth generation risk
 project and Randy Kass which had early Apple Macintosh computer at this timeeverything was done with floppy disks
 which are old technologies that to could store things that didn't have muchcapacity and you had to to get any work
 done you're always sticking in your little floppy disk in and out becausethey didn't have much capacity but they
 started building what are called hard disk drives which is magnetic materialthat can remember information storage
 for the Mac and Randy asked the question when he saw this disk next to his Macjeez he's a brand-new small things
 before that for the big computers that the disk would be the size of washingmachines and here's something the size
 of a kind of the size of a book or so this is I wonder what we could do withthat well we the Randy was involved in
 the in the fourth generation risk project here at Berkeley 80s so wefigured out a way how to make the
 computation part the processor part go a lot faster but what about the storagepart can we do something to make it
 faster so we hit upon the idea of taking a lot of these disks developed forpersonal computers and mackintoshes and
 putting many of them together instead of one of these washing machine sizedthings and so we were to rub the first
 draft of the paper and we'd have 40 of these little PC DOSinstead of one of these washing machine
 size things and they would be much cheaper because they're made for PCs andthey could actually kind of be faster
 because there was 40 of them rather than one of them and so he wrote a paper likethat and send it to one of a former
 Berkeley students at IBM and he said well this is all great and good but whatabout the reliability of these things
 now you have 40 of these devices each of which are kind of PC quality so they'renot as good as these IBM washing
 machines IBM dominated the the the storage Genesis so youreliably gonna be awful and so when we
 calculated it out instead of you know it breaking on average once a year it wouldbreak every two weeks so we thought
 about the idea and said well we got to address the reliability so we did itoriginally performance but we had do
 reliability so the name redundant array of inexpensive disks is array of thesedisks inexpensive life for pcs but we
 have extra copies so if one breaks we won't lose all the information will haveenough redundancy that we could let some
 break and we can still preserve the information so the name is an array ofinexpensive discs this is a collection
 of these pcs and the are part of the name was the redundancy so they'd bereliable and it turns out if you put a
 modest number of extra disks in one of these arrays it could actually not onlybe as faster and cheaper that one of
 these washing machine discs it could be actually more reliable because you couldhave a couple of breaks even with these
 cheap discs whereas one failure with the washing machine thing would knock it out

1:32:10
Speaker 1 :did you did you have a sense just like
 with risk that in the 30 years that followed raid would take over as a as a

1:32:22
Speaker 0 :man I think George I I'd say I think I'm
 naturally an optimist but I thought our ideas were rightI thought kind of like Moore's law it
 seemed to me if you looked at the history of the disk drivesthey went from washing machine size
 things than they were getting smaller and smaller and the volumes were withthe smaller disk drives because that's
 where the PCs were so we thought that was a technological trend that diskdrives
 the volume disk drives was going to be smallgetting smaller and smaller devices
 which were true they were the size of the I don't know eight inches diameterthan five inches than three inches of
 diameters and so that it made sense to figure out how to deal things with anarray of disks so I think it was one of
 those things where logically we think the technological forces were on ourside that it made sense so we expected
 it to catch on but there was that same kind of business question you know IBMwas the big pusher of these disk drives
 in the real world where the technical advantage get turned into a businessadvantage or not it proved to be true it
 did in so you know we thought we were sound technically and it was unclearworth of the business side but we kind
 of as academics we believe the technology should win and and it did and

1:33:42
Speaker 1 :and if you look at those thirty years
 just from your perspective are there interesting developments in the space ofstorage that have happened in that time


1:33:50
Speaker 0 :yeah the big thing that happened both a
 couple of things that happened what we did had a modest amount of storage so asredundancy as people built bigger and
 bigger storage systems they've added more we doesn't see so they could havemore failures and they have biggest
 thing that happened in storage is for decades it was based on thingsphysically spinning called hard disk
 drives where you used to turn on your computer and it would make a noise whatthat noise was was the disk drive
 spinning and they were rotating it in like 60 revolutions per second and it'slike if you remember the vinyl vinyl
 records if you've ever seen those that's what it looked like and there was like aneedle like on a vinyl record that was
 reading it so the big drive a change is switching that over to a similartechnology called flash so within the
 last I'd say about decade is increasing fraction of all the computers in theworld are using semiconductor for
 storage the flash drive instead of being magnetic their optical their there welltheir semiconductor writing of
 information into very densely and that's been a huge difference so allthe cell phones in the world use flash
 most of the laptops use flash all the embedded devices use flash instead ofstorage still in the cloud magnetic
 disks are more economical than flash but they used both in the cloud so it's beena huge change in the storage industry
 this the switching from primarily disk to being primarily semiconductor for the

1:35:28
Speaker 1 :individual discs but still the raid
 mechanism applies to those different

1:35:33
Speaker 0 :kinds of yes the the people will still
 use raid ideas because it's kind of what's different you know kind ofinteresting kind of psychologically if
 you think about it people have always worried about the reliability ofcomputing since the earliest days so
 kind of but if we're talking about computation if your computer makes amistake and the computer says the
 computer has worries to check and say we screwed up we made a mistake whathappens is that program that was running
 you have to redo it which is a hassle for storage if you've sent importantinformation away and it loses that
 information you go nuts yeah yeah this is the worst I oh my god so if you havea laptop and you're not backing it up on
 the cloud or something like this and your disk drive breaks which it can doyou'll lose all that information and you
 just go crazy right so the importance of reliability for storage is tremendouslyhigher than the importance of
 reliability for computation because of the consequences of it so yes so raidideas are still very popular even with
 the switch of the technology although you know flash drives are more reliableyou know if you're not doing anything
 like backing it up to get some redundancy so they handle it you'reyou're you're taking great risks you


1:36:54
Speaker 1 :said that for you and possibly from any
 others teaching and research don't conflict with each other as right onemight suspect and in fact they kind of
 complement each other so maybe a question I have is how is teachinghelped you in your research or just in
 your entirety as a person who both teachesand does research and just thinks and
 creates new ideas in this world yes I

1:37:17
Speaker 0 :think I think what happens is is when
 you're a college student you know there's this kind of tenure system anddoing research so kind of this model
 that you know is popular in America I think America really made it happen iswe can attract these really great
 faculty to research universities because they get to do research as well as teachand that especially in fast-moving
 fields this means people are up-to-date and they're teaching those kind ofthings so but when you run into a really
 bad professor a really bad teacher I think the students think well this guymust be a great researcher because why
 else could he be here so is I you know I I after 40 years at Berkeley we had aretirement party and I got a chance to
 reflect and I looked back to some things that is not my experience there's a Isaw a photograph of five of us in the
 department who won the distinguished Teaching Award from campus a very highhonor you know what I've got one of
 those when the highest honors so they're five of us on that picturethere's Manuel Blum Richard Karp me
 Randy Katz and John osterhaus contemporaries of mine I mentioned Randyalready all of us are in the National
 Academy of Engineering we've all run the distinguished Teaching Award Blum Karpand I are all have turing award just
 going away that's right you know the highest award in computing so theopposite right it's what happens if you
 it's it's they're highly correlated so probably the other way to think of it ifyou're very successful people may be
 successful at everything they do it's not an either/or and but it's an

1:38:55
Speaker 1 :interesting question whether
 specifically that's probably true but specifically for teaching if there'ssomething in teaching that it's the
 Richard Fineman right right yeah is there something about teaching thatactually makes your research makes you
 think deeper and more outside the box

1:39:11
Speaker 0 :and yeah absolutely so yeah I was going
 to bring up Fineman I mean he criticized the Institute of Advanced Studieshe says there's Advanced Studies was
 this thing that was created in your Princeton where Einstein and all thesesmart people
 and when he was invited he said he thought it was a terrible idea his thisis a university was it was supposed to
 be heaven right a university without any teaching but he thought it was a mistakeis getting up in the classroom and
 having to explain things to students and having them ask questions like well whyis that true makes you stop and think so
 he to think he thought and I agree I think that interaction between a retinaresearch university and having students
 with bright young man's asking hard questions the whole time is synergisticand you know a university without
 teaching wouldn't be as vital and exciting a place and I think it helpsstimulate the the research another


1:40:06
Speaker 1 :romanticized question but what's your
 favorite concept or idea to teach what inspires you or you see inspire thestudents is there something to pasta my
 or or puts the fear of God in them I don't know II whichever is most

1:40:21
Speaker 0 :effective I mean in general I think
 people are surprised I've seen a lot of people who don't think they liketeaching
 come come give guest lectures or teach a course and get hooked on seeing thelights turn on right his people you can
 explain something to people that they don't understand and suddenly they getsomething you know that's that's not
 that's important and difficult and just seeing the lights turn on is a you knowit's a real satisfaction there I don't
 think there's any in a specific example of that it's just the general joy ofseeing them seeing them understand I


1:40:59
Speaker 1 :have to talk about this because I've
 wrestled I do usual arts yes yes I love Russ I'm a huge I'm Russian so I'll sure

1:41:06
Speaker 0 :

1:41:07
Speaker 1 :I'd have talked to Dan Gable oh yeah I


1:41:11
Speaker 0 :guess so fine yang Gables my era kind of


1:41:15
Speaker 1 :guy so you wrestled UCLA among many
 other things you've done in your life competitively in sports and science onyou've wrestled maybe again continue in
 their immense sessions but what have you learned about life yeah and maybe evensize from wrestling or from that's in


1:41:32
Speaker 0 :fact I wrestled at UCLA but also at El
 Camino can be College and just right now we were inthe state of California we were state
 champions at El Camino and the fact I was talking to my mom and I got intoUCLA but I decided to go to the
 Community College which is it's much he's harder to go to UCLA than CommunityCollege and I asked why did I make the
 decision because I thought that was because of my girlfriend she said wellit was the girlfriend and and you
 thought the wrestling team was really good and we were right we had a greatwrestling team it we actually wrestled
 against UCLA at a tournament and we beat UCLA it's a community college which justfreshmen and sophomores and the reason I
 brought this up is I'm gonna go they've invited me back at El Camino if give alecture next month and so I'm Liev my
 friend who was on the wrestling team that we're still together we're rightnow reaching out to other members of the
 wrestling team you can get together every Union but in terms of me it was ahuge difference
 I was I was both I was kind of the age cutoff I was who's December first and soI was almost always the youngest person
 in my class and I matured later on you know our family badgered later so I wasalmost always the smallest guy so you
 know I took in kind of nerdy courses but I was wrestling so wrestling was hugefor my you know self-confidence in high
 school and then you know I kind of got bigger at El Camino and in college andso I had this kind of physical
 self-confidence and it's translated into research self-confidence and and alsokind of I've had this feeling even today
 in my 70s you know if something if something going on and streets there'sbad physically I'm not gonna ignore it
 right I'm gonna stand up and try and straighten that out and that kind of

1:43:32
Speaker 1 :confidence just carries through the


1:43:35
Speaker 0 :entirety of your life yeah and the same
 things happens intellectually if there's something going on where people aresaying something that's not true I feel
 it's my job to stand up and just like I would in the street if there's somethinggoing on somebody attacking some woman
 or something I'm not I'm not standing by and letting thatso I feel it's my job to stand up so
 it's kind of ironically translates the other things that turned out for both Ihad really great college in high school
 coaches and they believed even though wrestling's an individual sport thatwould be be more successful as a team if
 we bonded together you do things that we would support each other rather thaneverybody you know in wrestling it's
 one-on-one and you could be everybody's on their own but he felt if we bonded asa team we'd succeed so I kind of picked
 up those skills of how to form successful teams and how do you fromwrestling and so I think one of most
 people would say one of my strengths is I can create teams of faculty watchteams of faculty grad students pull all
 together for a common goal and you know and you often be successful at it but Igot I got both of those things from
 wrestling also I think I heard this line about if people are in kind of you knowcollision you know sports with physical
 contact like wrestling or football and stuff like that people are a little bitmore you know assertive or something so
 I think I think that also comes through is you know in I was I didn't shy awayfrom the risk debates you know I was
 yeah I enjoyed taking on the arguments and stuff like that so it was it was aI'm really glad I did wrestling I think
 it was really good for my self-image and I learned a lot from it so I thinkthat's you know sports done well you
 know there's really lots of positives you can take about it leadership youknow how to how to form teams and how to
 be successful so we've talked about

1:45:26
Speaker 1 :metrics a lot there's a really cool in
 terms of bench press and weightlifting pioneers metric do you develop that wedon't have time to talk about but it's
 it's a really cool that people should look intoit's rethinking the way we think about
 metrics and weightlifting but let me talk about metrics more broadly sincethat appeals Cu in all forms let's look
 at the most ridiculous the biggest question of the meaning of life if youwere to try to put metrics on a life
 well-lived what would those metrics be

1:45:55
Speaker 0 :yeah a friend Randy Katz said this he
 said you know when when it's time to sign off it'sit's the measure isn't the number of
 zeros in your bank account it's the number of inches in the obituary in TheNew York Times he said it I I think you
 know having and you know this is a cliche is that people don't die wishingthey'd spent more time in the office
 right is I reflect upon my career there have been you know a half a dozen or adozen things say I've been proud of a
 lot of them aren't papers or scientific well certainly my family my wife we'vebeen married more than 50 years kids and
 grandkids that's really precious education thinks I've done I'm veryproud of you know books and courses I
 did some help with underrepresented groups that was effective so it wasinteresting just seeing what were the
 things I reflected you know I had hundreds of papers but some of themweren't the papers like the risk and
 rate stuff wasn't proud of but a lot of them were or not those things so peoplewho are just spend their lives you know
 going after the dollars are going after all the papers in the world you knowthat's probably not the things that are
 afterwards you're gonna care about when I was a yeah just when I got the offerfrom Berkeley but before I showed up I
 read a book where they interviewed a lot of people in all walks of life and whatI got out of that book was the people
 who felt good about what they did was the people who affected people asopposed to things that were more
 transitory so I came into this job assuming that it wasn't going to be thepapers it was gonna be relationships
 with the people over time that I would I would value and that was a correctassessment right it's it's the people
 you work with the people you can influence the people you can help is thethings that you feel good about towards
 into your career it's not not the the stuff that's more transitory I don't

1:47:54
Speaker 1 :think there's a better way to end it


1:47:55
Speaker 0 :

1:47:57
Speaker 1 :then talking about your family the the
 over 50 years of being married to your

1:48:03
Speaker 0 :childhood sweetheart is how do when you
 tell people you've been married 50 years they want to know why how why I can tellyou the nine magic words that you need
 to say to your partner to keep a good relationship in the nine magic words arewas wrong you were right I love you okay
 and you got to say all nine you can't say I was wrong you were right you're ajerk you know you guess so yeah a freely
 acknowledging that you made a mistake the other person was right and that youlove them really gets over a lot of
 bumps in the road so that's what I pass

1:48:38
Speaker 1 :along beautifully put David is a huge
 honor thank you so much for the book you've written for the research you'vedone for changing the world thank you


1:48:45
Speaker 0 :for talking to that oh thanks for the
 interview

1:48:47
Speaker 1 :thanks for listening to this
 conversation with David Patterson and thank you to our sponsors the JordanHarbinger show and cash app please
 consider supporting this podcast by going to Jordan Harbinger complex and

1:49:00
Speaker 0 :

1:49:01
Speaker 1 :downloading cash app and using colex


1:49:04
Speaker 0 :podcast click the links buy the stuff


1:49:06
Speaker 1 :it's the best way to support this
 podcast and the journey I'm on if you

1:49:11
Speaker 0 :

1:49:12
Speaker 1 :enjoy this thing subscribe on youtube
 review it with five stars in a podcast supported on patreon or connect with meon Twitter and lex Freedman spelled
 without the e try to figure out how to do that it's just fr ID ma n and now letme leave you with some words from Henry
 David Thoreau our life is frittered away by detail simplify simplifythank you for listening and hope to see


